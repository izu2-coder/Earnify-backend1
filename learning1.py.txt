from flask import Blueprint, request, jsonify learning_bp = Blueprint('learning', __dirname) # Mock course data courses_db = { "python-side-hustle": {"title": "Python for Side Hustles", "price": "₦800", "unlocks": ["data-entry", "script-writing"]}, "no-code-apps": {"title": "No-Code Apps in 1 Week", "price": "₦600", "unlocks": ["landing-page", "automation-task"]}, "tiktok-pro": {"title": "TikTok Influencer Pro", "price": "₦500", "unlocks": ["tiktok-video", "brand-collab"]}, "affiliate-japa": {"title": "Affiliate Japa Guide", "price": "₦750", "unlocks": ["affiliate-marketing", "dropshipping"]} } # Mock task database tasks_db = { "data-entry": {"title": "Data Entry Work", "reward": "₦1K", "location": "Remote"}, "script-writing": {"title": "Write TikTok Scripts", "reward": "₦1.5K", "location": "Remote"}, "landing-page": {"title": "Build Landing Page", "reward": "₦2.5K", "location": "Remote"}, "automation-task": {"title": "Set Up Automation", "reward": "₦3K", "location": "Remote"}, "tiktok-video": {"title": "Create 3 TikTok Videos", "reward": "₦800", "location": "Remote"}, "brand-collab": {"title": "TikTok Brand Collab", "reward": "₦2K", "location": "Lagos"}, "affiliate-marketing": {"title": "Promote Product", "reward": "₦1.2K", "location": "Nationwide"}, "dropshipping": {"title": "Manage Dropshipping Store", "reward": "₦3K", "location": "Remote"} } user_progress = {} @learning_bp.route('/enroll', methods=['POST']) def enroll_course(): data = request.get_json() user_id = data.get('user_id') course_id = data.get('course_id') if not user_id or not course_id: return jsonify({"error": "Missing user or course ID"}), 400 if course_id not in courses_db: return jsonify({"error": "Course not found"}), 400 user_progress[f"{user_id}_{course_id}"] = { "status": "enrolled", "progress": 0 } return jsonify({ "message": "Enrollment successful", "course": courses_db[course_id] }), 200 @learning_bp.route('/complete', methods=['POST']) def complete_course(): data = request.get_json() user_id = data.get('user_id') course_id = data.get('course_id') key = f"{user_id}_{course_id}" if user_progress.get(key, {}).get("status") != "enrolled": return jsonify({"error": "User not enrolled or already completed"}), 400 user_progress[key]["status"] = "completed" user_progress[key]["progress"] = 100 course = courses_db[course_id] unlocked_tasks = [tasks_db[task_id] for task_id in course["unlocks"]] return jsonify({ "message": "Course completed!", "unlocked_tasks": unlocked_tasks }), 200